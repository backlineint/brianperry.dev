---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "../layouts/Post.astro";
import { SITE_TITLE } from "../consts";

interface Path {
  params: {
    slug: string;
  };
  props: {
    entry:
      | CollectionEntry<"posts">
      | CollectionEntry<"jams">
      | CollectionEntry<"til">;
  };
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const jamsEntries = await getCollection("jams");
  const jamsPaths = jamsEntries.map((entry) => ({
    params: { slug: `jams/${entry.slug}` },
    props: { entry },
  }));
  const postsEntries = await getCollection("posts");
  const postsPaths = postsEntries.map((entry) => ({
    params: { slug: `posts/${entry.slug}` },
    props: { entry },
  }));
  const tilEntries = await getCollection("til");
  const tilPaths = tilEntries.map((entry) => ({
    params: { slug: `til/${entry.slug}` },
    props: { entry },
  }));

  const paths: Path[] = jamsPaths;
  paths.push(...postsPaths);
  paths.push(...tilPaths);

  return paths;
}

const { entry } = Astro.props;
const { title, date, description, imagePath } = entry.data;
const { Content } = await entry.render();
---

<Layout
  title={`${title} - ${SITE_TITLE}`}
  description={description}
  pubDate={date}
  heroImage={imagePath?.src}
>
  <Content />
</Layout>
